var c=(()=>{for(var Z=new Uint8Array(128),A=0;A<64;A++)Z[A<26?A+65:A<52?A+71:A<62?A-4:A*4-205]=A;return B=>{for(var G=B.length,l=new Uint8Array((G-(B[G-1]=="=")-(B[G-2]=="="))*3/4|0),Q=0,b=0;Q<G;){var V=Z[B.charCodeAt(Q++)],W=Z[B.charCodeAt(Q++)],E=Z[B.charCodeAt(Q++)],X=Z[B.charCodeAt(Q++)];l[b++]=V<<2|W>>4,l[b++]=W<<4|E>>2,l[b++]=E<<6|X}return l}})(),d=c("");export{d as default};
