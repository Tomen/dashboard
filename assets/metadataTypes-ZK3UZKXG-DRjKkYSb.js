var V=(()=>{for(var Q=new Uint8Array(128),A=0;A<64;A++)Q[A<26?A+65:A<52?A+71:A<62?A-4:A*4-205]=A;return B=>{for(var G=B.length,l=new Uint8Array((G-(B[G-1]=="=")-(B[G-2]=="="))*3/4|0),Z=0,b=0;Z<G;){var c=Q[B.charCodeAt(Z++)],W=Q[B.charCodeAt(Z++)],E=Q[B.charCodeAt(Z++)],X=Q[B.charCodeAt(Z++)];l[b++]=c<<2|W>>4,l[b++]=W<<4|E>>2,l[b++]=E<<6|X}return l}})(),Y=V("");export{Y as default};
